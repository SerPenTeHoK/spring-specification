package fr.pinguet62.springruleengine.core.builder.database.autoconfigure;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
import org.springframework.beans.factory.support.BeanDefinitionRegistry;
import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.jdbc.datasource.init.DataSourceInitializer;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.stereotype.Component;
import org.springframework.transaction.PlatformTransactionManager;

import javax.sql.DataSource;
import javax.sql.XADataSource;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import static fr.pinguet62.springruleengine.core.builder.database.autoconfigure.SpringSpecificationBeans.*;

/**
 * Restore default priority of Spring Boot auto-configurated {@link Bean}s if necessary,
 * in order to avoid multiple bean definition caused by those generated by Spring Specification.
 */
@Component
public class FixPrimaryBeanDefinitionRegistryPostProcessor implements BeanDefinitionRegistryPostProcessor {

    private static final Map<Class<?>, String> springBootBeans = new HashMap<>();

    static {
        // DataSource
        springBootBeans.put(DataSourceProperties.class, DATASOURCE_PROPERTIES);
        springBootBeans.put(DataSource.class, DATASOURCE);
        springBootBeans.put(XADataSource.class, XA_DATASOURCE);
        springBootBeans.put(Object.class, DATASOURCE_MBEAN);
        springBootBeans.put(DataSourceInitializer.class, DATASOURCE_INITIALIZER);
        // JPA
        springBootBeans.put(JpaProperties.class, JPA_PROPERTIES);
        springBootBeans.put(JpaVendorAdapter.class, JPA_VENDOR_ADAPTER);
        springBootBeans.put(EntityManagerFactoryBuilder.class, ENTITY_MANAGER_FACTORY_BUILDER);
        springBootBeans.put(LocalContainerEntityManagerFactoryBean.class, ENTITY_MANAGER_FACTORY);
        springBootBeans.put(PlatformTransactionManager.class, TRANSACTION_MANAGER);
    }

    /**
     * From {@link Class type}, if (in addition to Spring Specification {@link Bean}s):
     * <ul>
     * <li>there is only 1 {@link Bean} found: declare as {@link BeanDefinition#isPrimary() primary};</li>
     * <li>there are many {@link Bean}s found: keep current configuration, because user had to define his own configuration.</li>
     * </ul>
     */
    @Override
    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
        for (Entry<Class<?>, String> entry : springBootBeans.entrySet()) {
            Class<?> beanType = entry.getKey();
            String springSpecificationBeanName = entry.getValue();

            String[] beanNames = beanFactory.getBeanNamesForType(beanType);
            if (beanNames.length != 2)
                continue;
            String userBeanName = Arrays
                    .stream(beanNames)
                    .filter(bd -> !bd.equals(springSpecificationBeanName))
                    .findFirst() // must be unique
                    .orElseThrow(RuntimeException::new)
                    .replaceFirst("^&", "")/*fix factory Spring prefix name*/;
            beanFactory.getBeanDefinition(userBeanName).setPrimary(true);
        }
    }

    /**
     * No action.
     */
    @Override
    public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {
    }

}

