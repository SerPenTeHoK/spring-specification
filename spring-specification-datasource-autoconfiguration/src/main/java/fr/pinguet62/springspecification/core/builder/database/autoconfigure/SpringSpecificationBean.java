package fr.pinguet62.springspecification.core.builder.database.autoconfigure;

import lombok.Getter;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.jdbc.core.JdbcOperations;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.init.DataSourceInitializer;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter;
import org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor;
import org.springframework.transaction.PlatformTransactionManager;

import javax.sql.DataSource;
import javax.sql.XADataSource;

import static java.util.Objects.requireNonNull;

/**
 * List of all {@link Bean#name()} generated by Spring Specification.
 */
public enum SpringSpecificationBean {

    DATASOURCE_PROPERTIES(DataSourceProperties.class, SpringSpecificationBeans.DATASOURCE_PROPERTIES_NAME),

    DATASOURCE(DataSource.class, SpringSpecificationBeans.DATASOURCE_NAME),

    XA_DATASOURCE(XADataSource.class, SpringSpecificationBeans.XA_DATASOURCE_NAME),

    DATASOURCE_MBEAN(Object.class, SpringSpecificationBeans.DATASOURCE_MBEAN_NAME),

    DATASOURCE_INITIALIZER(DataSourceInitializer.class, SpringSpecificationBeans.DATASOURCE_INITIALIZER_NAME),

    JPA_PROPERTIES(JpaProperties.class, SpringSpecificationBeans.JPA_PROPERTIES_NAME),

    JPA_VENDOR_ADAPTER(JpaVendorAdapter.class, SpringSpecificationBeans.JPA_VENDOR_ADAPTER_NAME),

    ENTITY_MANAGER_FACTORY_BUILDER(EntityManagerFactoryBuilder.class, SpringSpecificationBeans.ENTITY_MANAGER_FACTORY_BUILDER_NAME),

    /**
     * @see javax.persistence.EntityManagerFactory
     */
    ENTITY_MANAGER_FACTORY(LocalContainerEntityManagerFactoryBean.class, SpringSpecificationBeans.ENTITY_MANAGER_FACTORY_NAME),

    /**
     * @see javax.transaction.TransactionManager
     */
    TRANSACTION_MANAGER(PlatformTransactionManager.class, SpringSpecificationBeans.TRANSACTION_MANAGER_NAME),

    TOMCAT_POOL_DATASOURCE_METADATA_PROVIDER(DataSourceProperties.class, SpringSpecificationBeans.TOMCAT_POOL_DATASOURCE_METADATA_PROVIDER_NAME),

    HIKARI_POOL_DATASOURCE_METADATA_PROVIDER(DataSourceProperties.class, SpringSpecificationBeans.HIKARI_POOL_DATASOURCE_METADATA_PROVIDER_NAME),

    COMMONSDBCP2_POOL_DATASOURCE_METADATA_PROVIDER(DataSourceProperties.class, SpringSpecificationBeans.COMMONSDBCP2_POOL_DATASOURCE_METADATA_PROVIDER_NAME),

    JDBC_TEMPLATE_NAME(JdbcTemplate.class, SpringSpecificationBeans.JDBC_TEMPLATE_NAME),

    JDBC_OPERATIONS_NAME(JdbcOperations.class, SpringSpecificationBeans.JDBC_OPERATIONS_NAME),

    NAMED_PARAMETER_JDBC_TEMPLATE_NAME(JdbcOperations.class, SpringSpecificationBeans.NAMED_PARAMETER_JDBC_TEMPLATE_NAME)/*,

    OPEN_ENTITY_MANAGER_IN_VIEW_INTERCEPTOR_NAME(OpenEntityManagerInViewInterceptor.class, SpringSpecificationBeans.OPEN_ENTITY_MANAGER_IN_VIEW_INTERCEPTOR_NAME),

    OPEN_ENTITY_MANAGER_IN_VIEW_FILTER_NAME(OpenEntityManagerInViewFilter.class, SpringSpecificationBeans.OPEN_ENTITY_MANAGER_IN_VIEW_FILTER_NAME)*/;

    @Getter
    private final Class<?> beanType;

    @Getter
    private final String beanName;

    SpringSpecificationBean(Class<?> beanType, String beanName) {
        this.beanType = requireNonNull(beanType);
        this.beanName = requireNonNull(beanName);
    }

}
